// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OTPCheckService.proto

#include "OTPCheckService.pb.h"
#include "OTPCheckService.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace api {

static const char* OTPCheck_method_names[] = {
  "/api.OTPCheck/Check",
};

std::unique_ptr< OTPCheck::Stub> OTPCheck::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< OTPCheck::Stub> stub(new OTPCheck::Stub(channel));
  return stub;
}

OTPCheck::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Check_(OTPCheck_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OTPCheck::Stub::Check(::grpc::ClientContext* context, const ::api::CheckRequest& request, ::api::CheckResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::api::CheckResponse>* OTPCheck::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::api::CheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::api::CheckResponse>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::CheckResponse>* OTPCheck::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::api::CheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::api::CheckResponse>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

OTPCheck::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      OTPCheck_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< OTPCheck::Service, ::api::CheckRequest, ::api::CheckResponse>(
          std::mem_fn(&OTPCheck::Service::Check), this)));
}

OTPCheck::Service::~Service() {
}

::grpc::Status OTPCheck::Service::Check(::grpc::ServerContext* context, const ::api::CheckRequest* request, ::api::CheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

