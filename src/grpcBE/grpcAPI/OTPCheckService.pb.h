// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OTPCheckService.proto

#ifndef PROTOBUF_OTPCheckService_2eproto__INCLUDED
#define PROTOBUF_OTPCheckService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace api {
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
class CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
}  // namespace api

namespace api {

namespace protobuf_OTPCheckService_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_OTPCheckService_2eproto

enum CheckRequest_OTPType {
  CheckRequest_OTPType_TOTP = 0,
  CheckRequest_OTPType_CheckRequest_OTPType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckRequest_OTPType_CheckRequest_OTPType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckRequest_OTPType_IsValid(int value);
const CheckRequest_OTPType CheckRequest_OTPType_OTPType_MIN = CheckRequest_OTPType_TOTP;
const CheckRequest_OTPType CheckRequest_OTPType_OTPType_MAX = CheckRequest_OTPType_TOTP;
const int CheckRequest_OTPType_OTPType_ARRAYSIZE = CheckRequest_OTPType_OTPType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CheckRequest_OTPType_descriptor();
inline const ::std::string& CheckRequest_OTPType_Name(CheckRequest_OTPType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CheckRequest_OTPType_descriptor(), value);
}
inline bool CheckRequest_OTPType_Parse(
    const ::std::string& name, CheckRequest_OTPType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckRequest_OTPType>(
    CheckRequest_OTPType_descriptor(), name, value);
}
// ===================================================================

class CheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest& default_instance();

  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CheckRequest* other);
  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CheckRequest_OTPType OTPType;
  static const OTPType TOTP =
    CheckRequest_OTPType_TOTP;
  static inline bool OTPType_IsValid(int value) {
    return CheckRequest_OTPType_IsValid(value);
  }
  static const OTPType OTPType_MIN =
    CheckRequest_OTPType_OTPType_MIN;
  static const OTPType OTPType_MAX =
    CheckRequest_OTPType_OTPType_MAX;
  static const int OTPType_ARRAYSIZE =
    CheckRequest_OTPType_OTPType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OTPType_descriptor() {
    return CheckRequest_OTPType_descriptor();
  }
  static inline const ::std::string& OTPType_Name(OTPType value) {
    return CheckRequest_OTPType_Name(value);
  }
  static inline bool OTPType_Parse(const ::std::string& name,
      OTPType* value) {
    return CheckRequest_OTPType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string login = 2;
  void clear_login();
  static const int kLoginFieldNumber = 2;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // string code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // .api.CheckRequest.OTPType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::api::CheckRequest_OTPType type() const;
  void set_type(::api::CheckRequest_OTPType value);

  // @@protoc_insertion_point(class_scope:api.CheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_OTPCheckService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse& default_instance();

  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CheckResponse* other);
  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.CheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_OTPCheckService_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest

// .api.CheckRequest.OTPType type = 1;
inline void CheckRequest::clear_type() {
  type_ = 0;
}
inline ::api::CheckRequest_OTPType CheckRequest::type() const {
  // @@protoc_insertion_point(field_get:api.CheckRequest.type)
  return static_cast< ::api::CheckRequest_OTPType >(type_);
}
inline void CheckRequest::set_type(::api::CheckRequest_OTPType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:api.CheckRequest.type)
}

// string login = 2;
inline void CheckRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckRequest::login() const {
  // @@protoc_insertion_point(field_get:api.CheckRequest.login)
  return login_.GetNoArena();
}
inline void CheckRequest::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CheckRequest.login)
}
#if LANG_CXX11
inline void CheckRequest::set_login(::std::string&& value) {
  
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CheckRequest.login)
}
#endif
inline void CheckRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CheckRequest.login)
}
inline void CheckRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CheckRequest.login)
}
inline ::std::string* CheckRequest::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:api.CheckRequest.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRequest::release_login() {
  // @@protoc_insertion_point(field_release:api.CheckRequest.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRequest::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:api.CheckRequest.login)
}

// string code = 3;
inline void CheckRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckRequest::code() const {
  // @@protoc_insertion_point(field_get:api.CheckRequest.code)
  return code_.GetNoArena();
}
inline void CheckRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CheckRequest.code)
}
#if LANG_CXX11
inline void CheckRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CheckRequest.code)
}
#endif
inline void CheckRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CheckRequest.code)
}
inline void CheckRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CheckRequest.code)
}
inline ::std::string* CheckRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:api.CheckRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRequest::release_code() {
  // @@protoc_insertion_point(field_release:api.CheckRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:api.CheckRequest.code)
}

// -------------------------------------------------------------------

// CheckResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::CheckRequest_OTPType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::CheckRequest_OTPType>() {
  return ::api::CheckRequest_OTPType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OTPCheckService_2eproto__INCLUDED
